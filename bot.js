const tmi = require('tmi.js');
const config = require('./config');
const TwitchAPI = require('./twitch-api');

// Configuration du client TMI
const client = new tmi.Client({
  options: { debug: true },
  identity: {
    username: config.BOT_USERNAME,
    password: config.OAUTH_TOKEN
  },
  channels: [config.CHANNEL]
});

// Variables globales
let isDuelActive = false;
let currentDuel = null;
const twitchAPI = new TwitchAPI();

// Fonction pour formater les messages avec des variables
function formatMessage(message, variables) {
  return message.replace(/\{(\w+)\}/g, (match, key) => {
    return variables[key] || match;
  });
}

// Fonction pour g√©n√©rer un timeout al√©atoire
function getRandomTimeout() {
  const minSeconds = config.MIN_TIMEOUT;
  const maxSeconds = config.MAX_TIMEOUT;
  const randomSeconds = Math.floor(Math.random() * (maxSeconds - minSeconds + 1)) + minSeconds;
  return Math.ceil(randomSeconds / 60); // Retourne en minutes
}

// Fonction pour d√©marrer un duel
function startDuel(challenger, target) {
  if (isDuelActive) {
    client.say(config.CHANNEL, config.MESSAGES.ALREADY_IN_DUEL);
    return;
  }

  isDuelActive = true;
  currentDuel = { challenger, target, startTime: Date.now() };

  const startMessage = formatMessage(config.MESSAGES.DUEL_START, {
    challenger: challenger,
    target: target
  });
  
  client.say(config.CHANNEL, startMessage);
  
  // Attendre 3 secondes avant de d√©terminer le vainqueur
  setTimeout(() => {
    endDuel();
  }, 3000);
}

// Fonction pour terminer un duel
async function endDuel() {
  if (!currentDuel) return;

  const { challenger, target } = currentDuel;
  
  // 50-50 chance (avec protection pour sopralus)
  let winner, loser;
  
  // Si sopralus participe au duel, il gagne toujours
  if (challenger.toLowerCase() === 'sopralus') {
    winner = challenger;
    loser = target;
  } else if (target.toLowerCase() === 'sopralus') {
    winner = target;
    loser = challenger;
  } else {
    // Sinon, 50-50 normal
    winner = Math.random() < 0.5 ? challenger : target;
    loser = winner === challenger ? target : challenger;
  }
  const timeoutMinutes = getRandomTimeout();

  // Messages de fin
  const winnerMessage = formatMessage(config.MESSAGES.DUEL_WINNER, { winner });
  const loserMessage = formatMessage(config.MESSAGES.DUEL_LOSER, { 
    loser, 
    timeout: timeoutMinutes 
  });

  client.say(config.CHANNEL, winnerMessage);
  client.say(config.CHANNEL, loserMessage);

  // Appliquer le vrai timeout via l'API Twitch
  const timeoutSeconds = timeoutMinutes * 60;
  const timeoutSuccess = await twitchAPI.timeoutUser(loser, timeoutSeconds, 'Duel Drakkar - D√©faite');
  
  if (timeoutSuccess) {
    console.log(`‚úÖ Timeout de ${loser} appliqu√© pour ${timeoutMinutes} minutes`);
  } else {
    console.log(`‚ùå √âchec de l'application du timeout √† ${loser}`);
    client.say(config.CHANNEL, `‚ö†Ô∏è Impossible d'appliquer le timeout √† ${loser}. V√©rifiez les permissions du bot.`);
  }
  
  // R√©initialiser le duel
  isDuelActive = false;
  currentDuel = null;
}

// Gestion des √©v√©nements de connexion
client.on('connected', (addr, port) => {
  console.log(`ü§ñ Bot connect√© √† ${addr}:${port}`);
  console.log(`üì∫ Rejoins le canal: ${config.CHANNEL}`);
});

// Gestion des erreurs
client.on('disconnected', (reason) => {
  console.log(`‚ùå Bot d√©connect√©: ${reason}`);
});

// Gestion des messages du chat
client.on('message', (channel, tags, message, self) => {
  // Ignorer les messages du bot
  if (self) return;

  const username = tags.username;
  const messageLower = message.toLowerCase();

  // Commande !drakkar
  if (messageLower.startsWith('!drakkar')) {
    const args = message.split(' ');
    
    if (args.length !== 2) {
      client.say(channel, config.MESSAGES.COMMAND_USAGE);
      return;
    }

    let target = args[1];
    
    // Nettoyer le nom de la cible (enlever @ si pr√©sent)
    if (target.startsWith('@')) {
      target = target.substring(1);
    }

    // V√©rifications
    if (!target || target.trim() === '') {
      client.say(channel, config.MESSAGES.INVALID_TARGET);
      return;
    }

    if (target.toLowerCase() === username.toLowerCase()) {
      client.say(channel, config.MESSAGES.SELF_TARGET);
      return;
    }

    // D√©marrer le duel
    startDuel(username, target);
  }
});

// Gestion des commandes de mod√©ration (pour les timeouts r√©els)
client.on('timeout', (channel, username, reason, duration, tags) => {
  console.log(`‚è∞ Timeout: ${username} pour ${duration} secondes. Raison: ${reason}`);
});

// Gestion des commandes de mod√©ration
client.on('ban', (channel, username, reason, tags) => {
  console.log(`üö´ Ban: ${username}. Raison: ${reason}`);
});

// Fonction pour se connecter
function connect() {
  try {
    client.connect();
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error);
    setTimeout(connect, 5000); // R√©essayer dans 5 secondes
  }
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Exception non captur√©e:', error);
  process.exit(1);
});

// D√©marrer le bot
async function startBot() {
  console.log('üöÄ D√©marrage du Bot Drakkar...');
  console.log('üìù Assurez-vous d\'avoir configur√© config.js avec vos informations Twitch');
  
  // Tester la connexion √† l'API Twitch
  console.log('üîç Test de connexion √† l\'API Twitch...');
  const apiConnected = await twitchAPI.testConnection();
  
  if (apiConnected) {
    console.log('‚úÖ Connexion √† l\'API Twitch r√©ussie');
    
    // V√©rifier les permissions de mod√©ration
    console.log('üîç V√©rification des permissions de mod√©ration...');
    const isModerator = await twitchAPI.isModerator();
    
    if (isModerator) {
      console.log('‚úÖ Bot mod√©rateur - Les timeouts fonctionneront !');
    } else {
      console.log('‚ö†Ô∏è Bot non mod√©rateur - Les timeouts ne fonctionneront pas');
      console.log('üí° Ajoutez drakkarbot comme mod√©rateur sur votre cha√Æne');
    }
    
    // Obtenir les infos de la cha√Æne
    try {
      const channelInfo = await twitchAPI.getChannelInfo();
      if (channelInfo) {
        console.log(`üì∫ Cha√Æne: ${channelInfo.displayName} - ${channelInfo.title || 'Aucun titre'}`);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Impossible de r√©cup√©rer les infos de la cha√Æne');
    }
    
    connect();
  } else {
    console.log('‚ùå √âchec de la connexion √† l\'API Twitch');
    console.log('‚ö†Ô∏è Les timeouts ne fonctionneront pas. V√©rifiez votre configuration.');
    console.log('üìù Assurez-vous d\'avoir configur√© TWITCH_CLIENT_ID et TWITCH_ACCESS_TOKEN');
    // Continuer quand m√™me pour le chat
    connect();
  }
}

startBot();
